{"version":3,"sources":["assets/icon.png","src/components/NavBar.tsx","src/components/Footer.tsx","src/pages/SemanticIndex.tsx","src/pages/About.tsx","App.tsx","web-build/register-service-worker.js","webpack:////home/runner/work/shapes-of-you/shapes-of-you/App.css?048e","App.css"],"names":["module","exports","useStyles","makeStyles","theme","menuButton","color","palette","common","white","solidButton","backgroundColor","primary","main","borderRadius","padding","dark","cursor","linkButton","textTransform","textDecoration","linkLogo","alignItems","display","NavBar","classes","AppBar","title","position","Toolbar","variant","to","className","Tooltip","src","iconImage","style","height","width","marginRight","alt","href","target","rel","Button","AuthButton","popup","darkLink","light","whiteLink","footer","spacing","marginTop","Copyright","Typography","align","Footer","Container","maxWidth","textAlign","paperSearch","searchInput","marginLeft","fontSize","flex","link","secondary","SemanticIndex","useTheme","webId","useWebId","React","useState","webid","shapes_files_list","search","repositories_hash","repositories_autocomplete","category_pie","checkbox_shacl","checkbox_shex","checkbox_sparql","page","shapes_per_page","state","setState","stateRef","useRef","updateState","useCallback","update","current","useEffect","endpointToQuery","axios","get","encodeURIComponent","getFilesQuery","then","res","project_final_array","data","results","bindings","map","row","Object","keys","key","console","log","catch","error","countRepositoriesQuery","result","repo_description","value","push","label","repository","count","shapeFileCount","description","location","replace","put","createSolidFile","handleCheckboxes","event","name","checked","filtered_files","filter","shapes_file","length","find","repo","includes","endsWith","file_description","shape_file_description","sparqlEndpoint","query","toLowerCase","indexOf","shapeFileUri","shapes","join","filtered_repos","item","i","ar","LoggedIn","marginBottom","Value","LoggedOut","List","ListItem","ListItemAvatar","Avatar","ListItemText","Paper","elevation","margin","Box","component","InputBase","inputProps","placeholder","onChange","IconButton","aria-label","FormGroup","FormControlLabel","control","Checkbox","TextField","id","e","type","Autocomplete","multiple","options","option","getOptionLabel","split","renderOption","Fragment","renderInput","params","CircularProgress","slice","project","toString","object","fontStyle","noun","suffix","parseInt","pluralize","shapeLabel","Chip","Pagination","Math","floor","val","justifyContent","settingsForm","saveButton","fullWidth","normalFont","smallerFont","alignLeft","paperPadding","paperTitle","fontWeight","About","open","dialogOpen","project_license","language_autocomplete","createMuiTheme","typography","website_description","App","Helmet","content","itemProp","property","basename","View","exact","path","navigator","window","addEventListener","serviceWorker","register","scope","info","api","__esModule","default","locals","___CSS_LOADER_API_IMPORT___"],"mappings":"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","file":"static/js/app.b0ee749c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.72626586.png\";","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from \"react-router-dom\";\n\nimport { AppBar, Toolbar, Button } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\n// import InfoIcon from '@material-ui/icons/Info';\n// import DashboardIcon from '@material-ui/icons/Dashboard';\n// import CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder';\n// import MenuBookIcon from '@material-ui/icons/MenuBook';\n// import WarningIcon from '@material-ui/icons/Warning';\n\nimport { AuthButton, Value } from '@solid/react';\n\n// @ts-ignore\nimport iconImage from '../../assets/icon.png';\n\nconst useStyles = makeStyles(theme => ({\n  menuButton: {\n    color: theme.palette.common.white\n  },\n  solidButton: {\n    backgroundColor: theme.palette.primary.main,\n    color: '#fff',\n    borderRadius: '6px',\n    // boxShadow: '0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08)',\n    padding: '7px 14px',\n    '&:hover': {  \n      backgroundColor: theme.palette.primary.dark,\n      cursor: 'pointer'\n    }\n  },\n  linkButton: {\n    textTransform: 'none',\n    textDecoration: 'none'\n  },\n  linkLogo: {\n    // Seems to fit the 48px navbar height...\n    // height: '48px',\n    alignItems: 'center',\n    display: 'flex',\n  },\n}))\n  \nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <AppBar title=\"\" position='static'>\n      <Toolbar variant='dense'>\n        <Link to=\"/\" className={classes.linkLogo}>\n          <Tooltip title='IDS Projects dashboard'>\n            <img src={iconImage} style={{height: '2em', width: '2em', marginRight: '10px'}} alt=\"Logo\" />\n          </Tooltip>\n        </Link>\n        {/* <Link to=\"/create-doap\" className={classes.linkButton}>\n          <Tooltip title='Create a DOAP description for your project'>\n            <Button className={classes.menuButton}>\n              <CreateNewFolderIcon />\n            </Button>\n          </Tooltip>\n        </Link> */}\n        <div className=\"flexGrow\"></div>\n        <a href=\"https://github.com/vemonet/shapes-of-you/tree/report\" \n            target=\"_blank\" rel=\"noopener noreferrer\" className={classes.linkButton}>\n          <Tooltip title='Reports for the files we failed to process, and that need to be fixed by their owners'>\n            <Button className={classes.menuButton}>\n              <AssignmentIcon />\n              &nbsp;Import reports\n            </Button>\n          </Tooltip>\n        </a>\n        {/* <Link to=\"/about\" className={classes.linkButton}>\n          <Tooltip title='About the Institute of Data Science'>\n            <Button className={classes.menuButton}>\n              <InfoIcon />\n            </Button>\n          </Tooltip>\n        </Link>\n        <Tooltip title='Go to IDS Best Practices documentation'>\n          <Button className={classes.menuButton} target=\"_blank\"\n          href=\"https://maastrichtu-ids.github.io/best-practices\">\n            <MenuBookIcon />\n          </Button>\n        </Tooltip> */}\n        <Tooltip  title='Go to https://github.com/vemonet/shapes-of-you'>\n          <Button className={classes.menuButton} target=\"_blank\"\n          href=\"https://github.com/vemonet/shapes-of-you\" rel=\"noopener noreferrer\">\n            <GitHubIcon />\n          </Button>\n        </Tooltip>\n        {/* <Tooltip title='Login with SOLID'> */}\n        <AuthButton title='Login with SOLID' className={classes.solidButton} popup=\"https://inrupt.net/common/popup.html\"/>\n        {/* </Tooltip> */}\n        {/* <AuthButton popup=\"https://solidcommunity.net/common/popup.html\"/> */}\n      </Toolbar>\n    </AppBar>\n  );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles(theme => ({\n  darkLink: {\n    textDecoration: 'none',\n    color: 'inherit',\n    '&:hover': {\n      color: theme.palette.primary.light,\n      textDecoration: 'none',\n    },\n  },\n  whiteLink: {\n    textDecoration: 'none',\n    color: 'inherit',\n    '&:hover': {\n      color: theme.palette.primary.dark,\n      textDecoration: 'none',\n    },\n  },\n  footer: {\n    padding: theme.spacing(2),\n    marginTop: 'auto',\n    color: 'white',\n    backgroundColor: theme.palette.primary.main,\n  },\n}));\n\nfunction Copyright() {\n  const classes = useStyles();\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <a className={classes.darkLink} target=\"_blank\" rel=\"noopener noreferrer\"\n      href=\"https://maastrichtuniversity.nl/ids\">\n        Vincent Emonet\n      </a>{' '}\n      {'2020.'}\n    </Typography>\n  );\n}\n\nexport default function Footer() {\n  const classes = useStyles();\n  // Set state in functional style:\n  // const [state, setState] = React.useState({search: '', name: 'Vincent'});\n  // console.log(state.search);\n  // // Set search without chaging name\n  // setState({...state, search: 'yo'})\n  // const onNameChange = React.useCallback((filterName) => {\n  //   console.log('callback', state.name);\n  // },\n  // [state.name]);\n  // // Tells callback to reload when change to state.name\n\n  // React.useEffect(() => {\n  //   console.log('componentDID mount');\n  //   return () => {\n  //     console.log('willMount');\n  //   }\n  // }, []) \n  // Empty dep list: will only run when componentDidMount\n\n  return (\n      <footer className={classes.footer}>\n        <Container maxWidth=\"md\" style={{textAlign: 'center'}}>\n          <Typography variant=\"body2\" >\n            Built for you, to explore the semantic space ✨️ website under the&nbsp;\n            <a className={classes.whiteLink} target=\"_blank\" rel=\"noopener noreferrer\"\n            href=\"https://github.com/vemonet/shapes-of-you/blob/main/LICENSE\">\n              MIT license\n            </a>\n            {/* <img src={require('../assets/images/mit_license.png')} /> */}\n          </Typography>\n          <Copyright />\n        </Container>\n      </footer>\n  );\n}","import React from 'react';\nimport { makeStyles,  useTheme } from '@material-ui/core/styles';\nimport { Typography, Container, Box, Button, Chip, Tooltip, Grid, Paper, CircularProgress } from \"@material-ui/core\";\nimport { IconButton, InputBase } from \"@material-ui/core\";\nimport { List, ListItem, ListItemAvatar, ListItemText, Avatar } from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport CodeIcon from '@material-ui/icons/Code';\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport SendIcon from '@material-ui/icons/Send';\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport DeviceHubIcon from '@material-ui/icons/DeviceHub';\nimport GavelIcon from '@material-ui/icons/Gavel';\n\nimport axios from 'axios';\n\nimport { FormGroup, FormControlLabel, Checkbox, TextField } from \"@material-ui/core\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport { LoggedIn, LoggedOut, Value, useWebId, useLDflexValue, useLDflexList } from '@solid/react';\nimport { Like } from '@solid/react';\nimport data from \"@solid/query-ldflex\";\n// import { data } from \"@solid/query-ldflex\";\n// import SolidStar from \"./SolidStar\";\n\n// import {newEngine} from '@comunica/actor-init-sparql';\n// import {ActorInitSparql} from '@comunica/actor-init-sparql/lib/ActorInitSparql-browser';\n// import {IQueryOptions, newEngineDynamicArged} from \"@comunica/actor-init-sparql/lib/QueryDynamic\";\n\nconst useStyles = makeStyles(theme => ({\n  paperSearch: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: '35ch',\n    marginRight: theme.spacing(3)\n  },\n  searchInput: {\n    marginLeft: theme.spacing(1),\n    fontSize: '16px',\n    flex: 1,\n  },\n  link: {\n    textDecoration: 'none',\n    color: theme.palette.primary.main,\n    '&:hover': {\n      color: theme.palette.secondary.main,\n      textDecoration: 'none',\n    },\n  },\n}))\n\nexport default function SemanticIndex() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const webId = useWebId();\n  // const solid_name = useLDflexValue('user.name') || 'unknown';\n  \n  const [state, setState] = React.useState({\n    webid: '',\n    shapes_files_list: [],\n    search: '',\n    repositories_hash: [],\n    repositories_autocomplete: [],\n    category_pie: {},\n    checkbox_shacl: true,\n    checkbox_shex: true,\n    checkbox_sparql: true,\n    page: 1,\n    shapes_per_page: 100,\n  });\n  const stateRef = React.useRef(state);\n\n  // Avoid conflict when async calls\n  // Can be done with another lib (cf. Turgay)\n  const updateState = React.useCallback((update) => {\n    stateRef.current = {...stateRef.current, ...update};\n    setState(stateRef.current);\n  }, [setState]);\n\n\n  // componentDidMount: Query SPARQL endpoint to get the shapes files infos\n  React.useEffect(() => {\n    const endpointToQuery = 'https://graphdb.dumontierlab.com/repositories/shapes-registry';\n\n    // Check SOLID pod for a shapes preference file\n    // https://github.com/solid/react-components/blob/master/demo/app.jsx\n    // https://solid.github.io/react-components/\n\n    // Query directly using Axios\n    axios.get(endpointToQuery + `?query=` + encodeURIComponent(getFilesQuery))\n      .then(res => {\n        const sparqlResultArray = res.data.results.bindings;\n\n        // Convert array to object: {0:\"a\", 1:\"b\", 2:\"c\"}\n        // const projects_converted_hash = { ...sparqlResultArray }\n        // let projects_hash: any = {}\n        // // Iterate over projects\n        // Object.keys(projects_converted_hash).forEach(function(project) {\n        //   const projectName = projects_converted_hash[project]['shapeFileUri']['value']\n        //   // Use the project URI as key in the hash\n        //   if (!projects_hash[projectName]){\n        //     projects_hash[projectName] = {shapes: []}\n        //   }\n        //   // Iterate over project properties\n        //   Object.keys(projects_converted_hash[project]).forEach(function(property: any) {\n        //     const propertyHash = projects_converted_hash[project][property]\n        //     if (propertyHash) {\n        //       if (property == 'shapes') {\n        //         // Exception for shapes which is a list\n        //         let shape_label = propertyHash.value;\n        //         if (shape_label.length > 100) {\n        //           const n = shape_label.lastIndexOf('#');\n        //           shape_label = shape_label.substring(n + 1);\n        //         }\n        //         if (shape_label.length > 150) {\n        //           shape_label = shape_label.substring(0, 150)\n        //         }\n        //         projects_hash[projectName][property].push(shape_label);\n        //       } else {\n        //         projects_hash[projectName][property] = propertyHash.value \n        //       }\n        //     }\n        //   })\n        // })\n        // Convert back to array for filtering\n        // const project_final_array: any = Object.keys(projects_hash).map((key) => projects_hash[key]);\n        const project_final_array: any = sparqlResultArray.map((row: any) => {\n          // console.log(row);\n          Object.keys(row).map((key) => row[key] = row[key]['value']);\n          return row\n          // Object.keys(row).map((key) => key['value']);\n        }); \n        console.log('project_final_array');\n        console.log(project_final_array);\n        // sparqlResultArray\n        updateState({shapes_files_list: project_final_array})\n      })\n      .catch(error => {\n        console.log(error)\n      })\n\n    // Get all shapes in files (3m2)\n    // axios.get(endpointToQuery + `?query=` + encodeURIComponent(getShapesQuery))\n    //   .then(res => {\n    //     const sparqlResultArray = res.data.results.bindings;\n\n    //     // Convert array to object: {0:\"a\", 1:\"b\", 2:\"c\"}\n    //     const projects_converted_hash = { ...sparqlResultArray }\n    //     let projects_hash: any = {}\n    //     // Iterate over projects\n    //     Object.keys(projects_converted_hash).forEach(function(project) {\n    //       const projectName = projects_converted_hash[project]['shapeFileUri']['value']\n    //       // Use the project URI as key in the hash\n    //       if (!projects_hash[projectName]){\n    //         projects_hash[projectName] = {shapes: []}\n    //       }\n    //       // Iterate over project properties\n    //       Object.keys(projects_converted_hash[project]).forEach(function(property: any) {\n    //         const propertyHash = projects_converted_hash[project][property]\n    //         if (propertyHash) {\n    //           if (property == 'shapes') {\n    //             // Exception for shapes which is a list\n    //             let shape_label = propertyHash.value;\n    //             if (shape_label.length > 100) {\n    //               const n = shape_label.lastIndexOf('#');\n    //               shape_label = shape_label.substring(n + 1);\n    //             }\n    //             if (shape_label.length > 150) {\n    //               shape_label = shape_label.substring(0, 150)\n    //             }\n    //             projects_hash[projectName][property].push(shape_label);\n    //           } else {\n    //             projects_hash[projectName][property] = propertyHash.value \n    //           }\n    //         }\n    //       })\n    //     })\n    //     // Convert back to array for filtering\n    //     const project_final_array: any = Object.keys(projects_hash).map((key) => projects_hash[key]);\n    //     updateState({shapes_files_list: project_final_array})\n    //   })\n    //   .catch(error => {\n    //     console.log(error)\n    //   })\n\n    // Get repositories and their files counts\n    let repositories_hash: any = []\n    axios.get(endpointToQuery + `?query=` + encodeURIComponent(countRepositoriesQuery))\n      .then(res => {\n        const sparqlResultArray = res.data.results.bindings;\n\n        sparqlResultArray.map((result: any) =>  {\n          // repositories_hash[result.repository.value] = {\n          let repo_description = '';\n          if (result.repo_description) {\n            repo_description = result.repo_description.value;\n          }\n          repositories_hash.push({\n            label: result.repository.value,\n            count: result.shapeFileCount.value,\n            description: repo_description,\n          })\n        });\n\n        updateState({repositories_hash: repositories_hash})\n      })\n      .catch(error => {\n        console.log(error)\n      })\n\n    // Query with the Comunica engine\n    // Not working on SPARQL endpoint, only on the examples they provide\n    // https://comunica.dev/docs/query/getting_started/query_app/\n    // const comunicaEngine = newEngine();\n    // comunicaEngine.query(`\n    //   SELECT ?s ?o WHERE {\n    //    ?s a ?o .\n    //   } LIMIT 100`, {\n    //   sources: ['https://dbpedia.org/sparql'],\n    // }).then((res: any) => {\n    //   console.log(res);\n    //   res.bindingsStream.on('data', (binding: any) => {\n    //     // console.log(binding.get('?s').value);\n    //     // console.log(binding.get('?s').termType);\n    //     // console.log(binding.get('?o').value);\n    //   });\n    // });\n\n    if (webId) {\n      createSolidFile(webId);\n    }\n\n  }, [webId])\n  // This useless array needs to be added for React to understand he needs to use the state inside...\n\n  function createSolidFile(webId: string) {\n    // console.log(webId);\n    // const location = webId + \"/public/shapes-of-you/preferences.ttl\";\n    const location = webId.replace(\"profile/card#me\", \"public/shapes-of-you/preferences.ttl\");\n    // console.log('Try to create file ' + location);\n    return data[location].put();\n  }\n\n  const pluralize = (count: any, noun: string, suffix = 's') =>\n  `${count} ${noun}${parseInt(count) !== 1 ? suffix : ''}`;\n\n  const searchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateState({ search: event.target.value })\n  }\n\n  const handleCheckboxes = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateState({ [event.target.name]: event.target.checked });\n  }\n\n  function handleAutocompleteRepositories(event: any, value: string[]) {\n    updateState({ repositories_autocomplete: value})\n  }\n  \n  // Each faceted search filter can be added here (on the shapes files array)\n  // Could not find good dynamic faceted search, best is https://github.com/ebi-gene-expression-group/scxa-faceted-search-results\n  const filtered_files = state.shapes_files_list.filter( (shapes_file: any) =>{\n    if (shapes_file) {\n      if (shapes_file.label) {\n        // Filter by repo if 1 selected\n        if (state.repositories_autocomplete.length == 0 || state.repositories_autocomplete.find((repo: string) => repo.includes(shapes_file.repository))) {\n          // Filter depending on shacl/shex checkboxes:\n          if ((state.checkbox_shex === true && shapes_file.label.endsWith('.shex'))\n          || (state.checkbox_sparql === true && (shapes_file.label.endsWith('.rq') || shapes_file.label.endsWith('.sparql')) )\n          || (state.checkbox_shacl === true && !shapes_file.label.endsWith('.shex') && !shapes_file.label.endsWith('.rq'))\n          // TODO: improve, some RDF files are shex)\n          ) {\n            // Filter on search:\n            let file_description = '';\n            if (shapes_file.repo_description) file_description = file_description + ' ' + shapes_file.repo_description;\n            if (shapes_file.shape_file_description) file_description = file_description + ' ' + shapes_file.shape_file_description;\n            if (shapes_file.sparqlEndpoint) file_description = file_description + ' ' + shapes_file.sparqlEndpoint;\n            if (shapes_file.query) file_description = file_description + ' ' + shapes_file.query;\n            return (shapes_file.label.toLowerCase().indexOf( state.search.toLowerCase() ) !== -1 \n              || shapes_file.shapeFileUri.toLowerCase().indexOf( state.search.toLowerCase() ) !== -1\n              || shapes_file.shapes && shapes_file.shapes.join(' ').toLowerCase().indexOf( state.search.toLowerCase() ) !== -1\n              || shapes_file.repository.toLowerCase().indexOf( state.search.toLowerCase() ) !== -1\n              || file_description.toLowerCase().indexOf( state.search.toLowerCase() ) !== -1\n            )\n          }\n        }\n      }\n    }\n  })\n\n  // If no repo filter, then we use the filtered list to have the repo filtered\n  // Return unique list of filtered repos\n  let filtered_repos: any = []\n  if (state.repositories_autocomplete.length == 0) {\n    filtered_repos = filtered_files.map( (shapes_file: any) =>{\n      return shapes_file.repository\n    }).filter((item, i, ar) => ar.indexOf(item) === i)\n  } else {\n    filtered_repos = state.shapes_files_list.map( (shapes_file: any) =>{\n      return shapes_file.repository\n    }).filter((item, i, ar) => ar.indexOf(item) === i)\n  }\n\n  // Define rendering of the page:\n  return(\n    <Container className='mainContainer'>\n      <Typography variant=\"h4\" style={{textAlign: 'center'}}>\n        💠 Shapes of You\n      </Typography>\n      <LoggedIn>\n        <Typography style={{textAlign: 'center', marginBottom: theme.spacing(2)}}>\n          Welcome to your semantic resources index <Value src=\"user.name\"/>!\n        </Typography>\n        {/* <Typography style={{textAlign: 'center', marginBottom: theme.spacing(2)}}>\n          {webId}\n        </Typography> */}\n        <Typography style={{textAlign: 'center', marginBottom: theme.spacing(3)}}>\n          Hpefully, soon you will be able to bookmark your favourites resources using your SOLID account! 🔖\n        </Typography>\n      </LoggedIn>\n      <LoggedOut>\n        <Typography style={{textAlign: 'center', marginBottom: theme.spacing(3)}}>\n          An index of publicly available semantic resources\n        </Typography>\n      </LoggedOut>\n\n      <Typography style={{marginBottom: theme.spacing(2)}}>\n        Shapes of you is the best place to <b>search and explore existing semantic shapes, ontologies, vocabularies and queries</b>. Do you need to validate RDF using SHACL or ShEx? Or do you want to find SPARQL queries about drugs? There might be a shape out there waiting for you! You can also explore shapes to find inspirations. You might even find a grlc API serving data relevant to your projects, who knows? Linked Open Data are full of surprise!\n      </Typography>\n\n      <Typography style={{marginBottom: theme.spacing(2)}}>\n        To insure their validity, all indexed files has been parsed using the corresponding python package (rdflib, obonet, PyShExC). You can check the list of files which failed to load in our <a href=\"https://github.com/vemonet/shapes-of-you/tree/report\" className={classes.link}>reports</a>. Feel free to fix them if you are the owner!\n      </Typography>\n\n      <a href=\"https://github.com/vemonet/shapes-of-you/actions?query=workflow%3A%22Get+shapes+from+GitHub%22\">\n        <img src=\"https://github.com/vemonet/shapes-of-you/workflows/Get%20shapes%20from%20GitHub/badge.svg\" \n        style={{marginBottom: theme.spacing(2)}} />\n      </a>\n\n      {/* <Typography>\n        Add the tag <code>shacl-shapes</code> or <code>shex</code> or <code>grlc</code> to your GitHub repository, we automatically index all SPARQL queries (<code>.rq</code>, <code>.sparql</code>), ShEx (<code>.shex</code>), SHACL files (<code>.ttl</code>, <code>.rdf</code>, <code>.jsonld</code>, <code>.trig</code>, <code>.nq</code>, etc) containing at least one <code>sh:NodeShape</code> from all repositories everyday at 1:00 and 13:00 🕐\n      </Typography> */}\n      <Typography>\n        Add one of those topics to your <a href=\"https://github.com\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a> repository, or mention it in your project description on <a href=\"https://gitlab.com\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a> and <a href=\"https://gitee.com\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\">Gitee</a>,&nbsp;\n        we automatically index files from public repositories everyday 🕐\n      </Typography>\n      <List>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <DeviceHubIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText>\n            <a href=\"https://www.w3.org/OWL/\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\"><b>OWL ontologies</b></a>: add the topic <code>owl</code>, we index RDF files, with all <code>owl:Class</code> they contain\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <MenuBookIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText>\n            <a href=\"https://www.w3.org/TR/swbp-skos-core-spec/\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\"><b>SKOS vocabularies</b></a>: add the topic <code>skos</code>, we index RDF files, with all <code>skos:Concept</code> they contain\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <CheckBoxIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            // secondary=\"shacl-shapes\"\n          > \n            <a href=\"https://www.w3.org/TR/shacl/\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\"><b>SHACL shapes</b></a>: add the topic <code>shacl-shapes</code>, we index RDF files, with all <code>sh:NodeShape</code> they contain\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <BubbleChartIcon />\n              {/* <SquareFootIcon /> */}\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText>\n            <a href=\"https://shex.io/\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\"><b>ShEx expressions</b></a>: add the topic <code>shex</code>, we index <code>.shex</code> files, and ShEx shapes defined in RDF files (but no metadata described in ShEx)\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <CodeIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText>\n            <a href=\"https://www.w3.org/TR/sparql11-query/\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\"><b>SPARQL queries</b></a>: add the topic <code>grlc</code>, we index <code>.rq</code> and <code>.sparql</code> files, and parse <a href=\"http://grlc.io\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\">grlc.io</a> APIs metadata, complying with the <a href=\"https://github.com/the-open-university/basil/wiki/Introduction\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\">BASIL convention</a>\n          </ListItemText>\n        </ListItem>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <GavelIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText>\n            <a href=\"http://www.obofoundry.org/\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\"><b>OBO ontologies</b></a>: add the topic <code>obo</code>, we index <code>.obo</code> files, with all terms they contain\n          </ListItemText>\n        </ListItem>\n      </List>\n\n      {/* <Typography style={{marginBottom: theme.spacing(2)}}>\n        We also index the same topics in <a href=\"https://gitlab.com\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\">GitLab</a> and <a href=\"https://gitee.com\" className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\">Gitee</a>, there is no topic on those websites, so just mention it in your project name or description.\n      </Typography> */}\n\n      {/* <Box display=\"flex\" style={{margin: theme.spacing(2, 0)}}></Box> */}\n      <Paper elevation={6} style={{padding: theme.spacing(3, 2), margin: theme.spacing(2, 0)}}>\n        <Typography variant=\"h5\">\n          {filtered_files.length} files in&nbsp;\n          {filtered_repos.length} repositories \n          {/* {(state.repositories_autocomplete.length > 0 && state.repositories_autocomplete.length) || Object.keys(state.repositories_hash).length} Shapes repositories  */}\n        </Typography>\n\n        {/* Filtering options */}\n        <Box display=\"flex\" style={{margin: theme.spacing(2, 0)}}>\n          {/* Search box */}\n          <Paper component=\"form\" className={classes.paperSearch}>\n            <InputBase\n              className={classes.searchInput} inputProps={{ 'aria-label': 'search' }}\n              placeholder={\"🔎 Search shapes\"}\n              onChange={searchChange}\n            />\n            <IconButton aria-label=\"search\">\n              <SearchIcon />\n            </IconButton>\n          </Paper>\n\n          {/* shacl/shex checkboxes */}\n          <FormGroup row>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={state.checkbox_shacl}\n                  onChange={handleCheckboxes}\n                  name=\"checkbox_shacl\"\n                  color=\"primary\"\n                /> }\n              label=\"SHACL\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={state.checkbox_shex}\n                  onChange={handleCheckboxes}\n                  name=\"checkbox_shex\"\n                  color=\"primary\"\n                /> }\n              label=\"ShEx\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={state.checkbox_sparql}\n                  onChange={handleCheckboxes}\n                  name=\"checkbox_sparql\"\n                  color=\"primary\"\n                /> }\n              label=\"SPARQL\"\n            />\n          </FormGroup>\n          <TextField\n            id=\"shapes-per-page\"\n            value={state.shapes_per_page}\n            onChange={(e: any) => {updateState({shapes_per_page: e.target.value})}}\n            label=\"Files per page\"\n            type=\"number\"\n            variant=\"outlined\"\n            // style={{ backgroundColor: '#ffffff' }}\n          />\n        </Box>\n\n        {/* Autocomplete to filter by repositories */}\n        <Autocomplete\n          multiple\n          value={state.repositories_autocomplete}\n          onChange={handleAutocompleteRepositories}\n          id=\"autocomplete-repositories\"\n          options={state.repositories_hash.filter( (repo: any) =>{ return (filtered_repos.indexOf(repo.label) > -1) })\n            .map((option: any) => option.label+ \",\" + option.count + \",\" + option.description)}\n          getOptionLabel={(option) => option.split(\",\")[0].replace('https://github.com/', '')}\n          renderOption={(option: any) => (\n            <React.Fragment>\n              {option.split(\",\")[0].replace('https://github.com/', '')} ({option.split(\",\")[1]} files) \n              {option.split(\",\")[2] && \n                <React.Fragment>\n                  &nbsp;- {option.split(\",\")[2]}\n                </React.Fragment>\n              }\n            </React.Fragment>\n          )}\n          renderInput={params => <TextField {...params} \n            label=\"📁 Filter by repositories\" \n            variant=\"outlined\" \n            // style={{ backgroundColor: '#ffffff' }}\n            // onInputChange={handleAutocompleteRepositories}\n            // size='small'\n            // InputProps={{\n            //   className: classes.whiteColor\n            // }}\n            // ListboxProps={{\n            //   className: classes.whiteColor,\n            // }}\n            // getOptionLabel={option => option.title}\n            // style={{ width: '60ch' }}\n          />}\n        />\n      </Paper>\n\n      {state.shapes_files_list.length < 1 && (\n        <div style={{textAlign: 'center'}}>\n          <CircularProgress style={{padding: theme.spacing(10, 10)}} />\n        </div>\n      )}\n\n      {/* Display Shapes files */}\n      {filtered_files.slice(((state.page - 1)*(state.shapes_per_page)), ((state.page)*(state.shapes_per_page) - 1)).map(function(project: any, key: number){\n        return <Paper key={key.toString()} elevation={2} style={{padding: theme.spacing(2, 2), margin: theme.spacing(2, 0)}}>\n          <Typography variant=\"h6\">\n            File:&nbsp;\n            <b><a href={project.shapeFileUri} className={classes.link}>{project.label}</a></b>\n            {project.query && project.sparqlEndpoint &&\n              // Add YASGUI link if relevant\n              // https://yasgui.triply.cc/#query=  &endpoint=\n              <a href={'https://yasgui.triply.cc/#query=' + encodeURIComponent(project.query) + '&endpoint=' + project.sparqlEndpoint}\n                className={classes.link} target='_blank'>\n                <Button variant=\"contained\" color=\"primary\" style={{margin: theme.spacing(0, 2)}}>\n                  <SendIcon />\n                  &nbsp;Query on YASGUI\n                </Button>\n              </a>\n            }\n            {project.query && !project.sparqlEndpoint &&\n              <a href={'https://yasgui.triply.cc/#query=' + encodeURIComponent(project.query)} \n                className={classes.link} target='_blank'>\n                <Button variant=\"contained\" color=\"primary\" style={{margin: theme.spacing(0, 2)}}>\n                  <SearchIcon />\n                  &nbsp;See on YASGUI\n                </Button>\n              </a>\n            }\n            <LoggedIn>\n              <Like object={project.shapeFileUri}>the Shape</Like>\n            </LoggedIn>\n          </Typography>\n          {/* shape_file_description */}\n          {project.shape_file_description &&\n            <Typography style={{fontStyle: 'italic', margin: theme.spacing(1, 0)}}>\n              {project.shape_file_description}\n            </Typography>\n          }\n          <Typography style={{margin: theme.spacing(1, 0)}}>\n            {/* In repository:&nbsp; */}\n            <a href={project.repository} className={classes.link}>\n              📁&nbsp;{project.repository.replace('https://github.com/', '')}\n            </a>\n            {project.repo_description &&\n              <>\n                &nbsp;-&nbsp;{project.repo_description}\n              </>\n            }\n          </Typography>\n          {project.shapes &&\n            <>\n              <Typography style={{marginTop: theme.spacing(1)}}>\n                Contains {pluralize(project.shapes.length, 'Shape')}:\n              </Typography>\n              {project.shapes.map((shapeLabel: string, key: number) => {\n                // Limit shape label size to 150 chars\n                return <Chip label={shapeLabel} color='primary' key={key.toString()}\n                    style={{margin: theme.spacing(1, 1)}}/>\n                // <Tooltip title={shapeLabel} key={key.toString()}>\n                // </Tooltip>\n              })}\n            </>\n          }\n        </Paper>\n      })}\n      <Pagination count={Math.floor(filtered_files.length / state.shapes_per_page) + 1} \n        color=\"primary\" onChange={(event,val)=> updateState({page: val})} \n        style={{ display:'flex', justifyContent: 'center' }}\n      />\n    </Container>\n  )\n}\n\nconst getFilesQuery = `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX schema: <https://schema.org/>\nPREFIX sh: <http://www.w3.org/ns/shacl#>\nPREFIX shex: <http://www.w3.org/ns/shex#>\nPREFIX void: <http://rdfs.org/ns/void#>\nSELECT DISTINCT * WHERE { \n    ?shapeFileUri a schema:SoftwareSourceCode ;\n        a ?shape_type ;\n        rdfs:label ?label ;\n        dc:source ?repository .\n    FILTER(?shape_type != schema:SoftwareSourceCode)\n    OPTIONAL { ?repository rdfs:comment ?repo_description }\n    OPTIONAL { ?shapeFileUri schema:query ?query }\n    OPTIONAL { ?shapeFileUri void:sparqlEndpoint ?sparqlEndpoint }\n    OPTIONAL { ?shapeFileUri dc:description ?shape_file_description }\n}`\n\n// SPARQL select query to get all shapes files and the list of their shapes\nconst getShapesQuery = `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX schema: <https://schema.org/>\nPREFIX sh: <http://www.w3.org/ns/shacl#>\nPREFIX shex: <http://www.w3.org/ns/shex#>\nPREFIX void: <http://rdfs.org/ns/void#>\nSELECT DISTINCT * WHERE { \n    ?shapeFileUri a schema:SoftwareSourceCode ;\n        a ?shape_type ;\n        rdfs:label ?label ;\n        dc:source ?repository ;\n        dcterms:hasPart ?shapes .\n    FILTER(?shape_type != schema:SoftwareSourceCode)\n    OPTIONAL { ?repository rdfs:comment ?repo_description }\n    OPTIONAL { ?shapeFileUri schema:query ?query }\n    OPTIONAL { ?shapeFileUri void:sparqlEndpoint ?sparqlEndpoint }\n    OPTIONAL { ?shapeFileUri dc:description ?shape_file_description }\n}`\n// } LIMIT 1000`\n\n// SPARQL select query to get all GitHub repos, their description and the count of shapes file in it\nconst countRepositoriesQuery = `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX schema: <https://schema.org/>\nPREFIX sh: <http://www.w3.org/ns/shacl#>\nPREFIX shex: <http://www.w3.org/ns/shex#>\nSELECT ?repository (count(?shapeFileUri) AS ?shapeFileCount) ?repo_description WHERE { \n  ?shapeFileUri a <https://schema.org/SoftwareSourceCode> ;\n    rdfs:label ?label ;\n    dc:source ?repository .\n  OPTIONAL { ?repository rdfs:comment ?repo_description }\n} GROUP BY ?repository ?repo_description\n`\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, Container, Paper, Button } from \"@material-ui/core\";\n\n// @ts-ignore\nimport iconImage from '../../assets/icon.png';\n\n// import { FormControl, TextField, Input, InputLabel, FormHelperText, Select } from '@material-ui/core';\n// import GetAppIcon from '@material-ui/icons/GetApp';\n// import Autocomplete from '@material-ui/lab/Autocomplete';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import Snackbar from '@material-ui/core/Snackbar';\n// import MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\n// import { Graph } from \"perfect-graph\";\n\nconst useStyles = makeStyles(theme => ({\n  settingsForm: {\n    width: '100%',\n    // textAlign: 'center',\n    '& .MuiFormControl-root': {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n    '& .MuiFormHelperText-root': {\n      marginTop: theme.spacing(0),\n      marginBottom: theme.spacing(1),\n    },\n  },\n  saveButton: {\n    textTransform: 'none',\n    margin: theme.spacing(2, 2),\n  },\n  fullWidth: {\n    width: '100%',\n  },\n  normalFont: {\n    fontSize: '14px',\n  },\n  smallerFont: {\n    fontSize: '12px',\n  },\n  alignLeft: {\n    textAlign: 'left'\n  },\n  paperPadding: {\n    padding: theme.spacing(2, 2),\n    margin: theme.spacing(2, 2),\n  },\n  paperTitle: {\n    fontWeight: 300,\n    marginBottom: theme.spacing(1),\n  }\n}))\n\n\nexport default function About() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    open: false,\n    dialogOpen: false,\n    project_license: '',\n    language_autocomplete: [],\n  });\n  // const form_category_dropdown = React.createRef(); \n\n  return(\n    <Container className='mainContainer'>\n        {/* <Typography variant=\"h4\" style={{textAlign: 'center', marginBottom: '20px'}}>\n          About\n        </Typography> */}\n\n      {/* image: {iconImage} */}\n      {/* Color: https://perfectgraph-5c619.web.app/?path=/story/components-components--view */}\n      {/* <Graph\n        style={{ width: '100%', height: 250 }}\n        nodes={[\n          {\n            id: 1,\n            position: { x: 10, y: 10 },\n            data: {\n              name: 'Institute of Data Science',\n              image: 'https://raw.githubusercontent.com/vemonet/shapes-of-you/main/assets/icon.png',\n              story: `Develop responsible data science by design to accelerate discovery across all sectors of society.`,\n              color: 'grey'\n            }\n          },\n          {\n            id: 2,\n            position: { x: 600, y: 10 },\n            data: {\n              name: 'Maastricht University',\n              image: 'https://raw.githubusercontent.com/vemonet/shapes-of-you/main/assets/icon.png',\n              story: `The most international university in the Netherlands, stands out for its innovative education model, and multidisciplinary approach to research and education.`,\n              color: 'grey'\n            }\n          },\n        ]}\n        edges={[\n          { id: 51, source: 1, target: 2 }\n        ]}\n        renderNode={({ item: { data } }) => (\n        <Graph.ProfileTemplate\n          name={data.name}\n          image={data.image}\n          story={data.story}\n          style={{ backgroundColor: '#eceff1' }}\n        />\n      )}\n      /> */}\n      \n      \n\n    </Container>\n  )\n}","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { View } from \"react-native\";\nimport { Router, Route } from \"./src/components/react-router\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport './App.css';\nimport NavBar from \"./src/components/NavBar\";\nimport Footer from \"./src/components/Footer\";\nimport SemanticIndex from \"./src/pages/SemanticIndex\";\nimport About from \"./src/pages/About\";\n// import blue from '@material-ui/core/colors/blue';\n\n// Change theme color and typography here\nconst theme = createMuiTheme({\n  palette: {\n    // Blue\n    primary: { light: '#63a4ff', main: '#1976d2', dark: '#004ba0' },\n    // Green\n    secondary: { light: '#4caf50', main: '#7e57c2', dark: '#00600f' },\n    // main: blue[700]\n    // primary: { light: blue[50], main: blue[600], dark: blue[900] },\n    // red: { light: '#f05545', main: '#b71c1c', dark: '#7f0000' },\n    // default: { light: '#fafafa', main: '#eceff1', dark: grey[600] }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Open Sans\\\", \\\"Roboto\\\", \\\"Arial\\\"\",\n    \"fontWeightLight\": 300,\n    \"fontWeightRegular\": 400,\n    \"fontWeightMedium\": 500\n    // \"fontSize\": 13\n  },\n});\n\nconst website_name = \"Shapes of you\"\nconst website_description = \"Index for publicly available semantic resources (OWL & OBO ontologies, SKOS RDF vocabularies, SHACL & ShEx shapes, SPARQL queries) stored in Git repositories (GitHub, GitLab, Gitee)\";\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <Helmet>\n      <title>Shapes of you</title>\n      <meta name=\"description\" content={website_description}/>\n\n      {/* Google / Search Engine Tags */}\n      <meta itemProp=\"name\" content={website_name}/>\n      <meta itemProp=\"description\" content={website_description}/>\n      <meta itemProp=\"image\" content=\"\"/>\n\n      {/* Facebook Meta Tags */}\n      <meta property=\"og:url\" content=\"https://vemonet.github.io/shapes-of-you\"/>\n      <meta property=\"og:type\" content=\"website\"/>\n      <meta property=\"og:title\" content={website_name}/>\n      <meta property=\"og:description\" content={website_description}/>\n      <meta property=\"og:image\" content=\"\"/>\n\n      {/* Twitter Meta Tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\"/>\n      <meta name=\"twitter:title\" content={website_name}/>\n      <meta name=\"twitter:description\" content={website_description}/>\n      <meta name=\"twitter:image\" content=\"\"/>\n    </Helmet>\n    <Router basename=\"/shapes-of-you/\">\n      <View style={{height: '100%', backgroundColor: '#eceff1'}}>\n        <NavBar />\n\n        <Route exact path=\"/\" component={SemanticIndex} />\n        <Route path=\"/about\" component={About} />\n        <Footer />\n      </View>\n    </Router>\n  </MuiThemeProvider>\n);\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/shapes-of-you/expo-service-worker.js', { scope: '/shapes-of-you/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","var api = require(\"!./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!./node_modules/css-loader/dist/cjs.js!./App.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.push([module.id, \"@import url(https://fonts.googleapis.com/css?family=Open+Sans);\"]);\n// Module\nexports.push([module.id, \".flexGrow {\\n  flex-grow: 1; \\n}\\n\\n.mainContainer {\\n  margin-top: 30px;\\n  margin-bottom: 20px;\\n}\\n\\npre, code {\\n  font-family: monospace, monospace;\\n  border-radius: 6px;\\n  padding: 2px;\\n  color: white;\\n  background-color: #455a64;\\n  /* background-color: #1976d2; */\\n}\\n  \\n/* @import url(\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\");\\nbody {\\n  margin: 0;\\n  padding: 0;\\n  text-align: center; } */\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n"],"sourceRoot":""}